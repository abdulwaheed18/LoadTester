spring:
  application:
    name: loadtester # Sets a global tag for metrics

loadtester:
  runDurationMinutes: 1 # Application will run for X minutes then shutdown (if old logic is still present). 0 or negative means run indefinitely.
  # For new UI-driven runs, this can be overridden by TestConfiguration.
  targets: # This becomes the "default" configuration if no user-defined config is selected
    - name: API-1-Default-From-YML
      url: https://dummyjson.com/auth/login
      method: POST
      headers:
        Content-Type: "application/json"
      payloadPath: classpath:payloads/foo.json
      desiredTps: 1 # Adjusted for practical testing; was 300
      throttleIntervalMs: 100 # e.g., 1 request every 2000ms max if desiredTps is high
    - name: API-2-Default-From-YML
      url: https://dummyjson.com/auth/login
      method: POST
      headers:
        Content-Type: "application/json"
      payloadPath: classpath:payloads/foo.json
      desiredTps: 2 # Adjusted for practical testing; was 300
      throttleIntervalMs: 3000 # e.g., 1 request every 2000ms max if desiredTps is high
  reporting:
    periodic:
      enabled: true
      summaryIntervalMs: 60000
    shutdown:
      enabled: true
    html:
      enabled: true
    history:
      directory: "./reports/history"
      saveJson: true
      saveCsv: true
    configurations: # Where user-defined test JSON files are stored
      directory: "./test_configs"

  http: # New section for HTTP client specific settings
    ssl:
      # Global flag to skip SSL certificate verification for all targets.
      # WARNING: Only use this in trusted development/testing environments.
      # DO NOT USE THIS IN PRODUCTION for external services.
      insecure-skip-verify: false # Set to true to skip SSL checks


management:
  endpoints:
    web:
      exposure:
        include: "health,info,prometheus,metrics"
  metrics:
    tags:
      application: ${spring.application.name}
    distribution:
      percentiles-histogram:
        http.server.requests: true
        loadtester.request.latency: true
      sla:
        loadtester.request.latency: 100ms, 250ms, 500ms, 1s

logging:
  level:
    com.example.loadtester: DEBUG
    io.netty.util.internal.PlatformDependent: WARN