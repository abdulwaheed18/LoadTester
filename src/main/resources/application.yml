spring:
  application:
    name: loadtester # Sets a global tag for metrics

loadtester:
  runDurationMinutes: 1 # Application will run for 5 minutes then shutdown. 0 or negative means run indefinitely.
  targets:
    - name: API1
      url: https://dummyjson.com/auth/login
      method: POST
      headers:
        Content-Type: "application/json"
      payloadPath: classpath:payloads/foo.json
      desiredTps: 1 # Adjusted for practical testing; was 300
      throttleIntervalMs: 10 # e.g., 1 request every 2000ms max if desiredTps is high
    - name: API2
      url: https://dummyjson.com/auth/login
      method: POST
      headers:
        Content-Type: "application/json"
      payloadPath: classpath:payloads/foo.json
      desiredTps: 2 # Adjusted for practical testing; was 300
      throttleIntervalMs: 3000 # e.g., 1 request every 2000ms max if desiredTps is high
  reporting:
    periodic:
      enabled: true # Set to true to enable periodic summary reports
      summaryIntervalMs: 60000 # Log summary report every 60 seconds (60000 ms)
    shutdown:
      enabled: true # Set to true to enable summary report on application shutdown
    html:
      enabled: true # Enable HTML report generation on shutdown
      filePath: "./loadtest-summary-report.html" # Path to save the HTML report


management:
  endpoints:
    web:
      exposure:
        include: "health,info,prometheus,metrics" # Expose these actuator endpoints
  metrics:
    tags: # Global tags applied to all metrics
      application: ${spring.application.name}
    distribution:
      percentiles-histogram:
        # Enable histogram data for latency metrics to allow server-side percentile calculation (e.g., in Prometheus)
        http.server.requests: true
        loadtester.request.latency: true # Custom timer name
      sla:
        # Define Service Level Objectives for latency (optional, for specific timers)
        loadtester.request.latency: 100ms, 250ms, 500ms, 1s # Example SLAs for latency timer

# Logging configuration (optional, for more detailed output)
logging:
  level:
    com.example.loadtester: DEBUG # Set to INFO for less verbose output in production
    io.netty.util.internal.PlatformDependent: WARN # Quiets down Netty noise on startup